<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- 
    specify variables:
    
    ${builddir} - where to build
    ${version}  - release version
    ${os}       - linux/windows
    
    ! qt-jambi is platform-dependent, so 
    copy qtjambi-[version].jar and qtjambi-[platform]-[version].jar to ${jambidir}/{$os}
    and rename them to qtjambi.jar and qtjambi-native.jar
 -->
<project default="create_run_jar" name="Create Runnable Jar for Project QJBookShelf" basedir=".">

    <property name="libdir" value="${basedir}/lib" />
    <property name="targetdir" value="${builddir}/jbookshelf-${os}-${version}" />
    <property name="jambidir-os" value="${jambidir}/${os}" />

    <target name="clean">
        <mkdir dir="${targetdir}" />
        <delete>
            <fileset dir="${targetdir}" />
        </delete>
    </target>

    <target name="copyfiles">
        <copy todir="${targetdir}/lib">
            <fileset dir="${libdir}" />
        </copy>
        <copy todir="${targetdir}/lib" file="${jambidir-os}/qtjambi.jar" />
        <copy todir="${targetdir}/lib" file="${jambidir-os}/qtjambi-native.jar" />
    </target>

    <target name="create_run_jar" depends="clean, copyfiles">

        <pathconvert property="libpath" pathsep=" ">
            <fileset dir="${targetdir}/lib" />
            <map from="${targetdir}/lib" to="lib" />
        </pathconvert>

        <jar destfile="${targetdir}/jbookshelf.jar">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Main-Class" value="org.jbookshelf.view.swinggui.main.MainWindow" />
                <attribute name="Class-Path" value="${libpath}" />
            </manifest>

            <fileset dir="${basedir}/bin" />
        </jar>

        <copy todir="${targetdir}" overwrite="true">
            <fileset dir="${basedir}/../../build/misc">
                <exclude name=".svn" />
            </fileset>
        </copy>

        <chmod perm="+x" file="${targetdir}/run.sh" />

        <zip destfile="${targetdir}.zip">
            <zipfileset dir="${targetdir}" prefix="jbookshelf" />
        </zip>
    </target>

    <!-- translation -->
    <path id="antlib.cp">
        <fileset dir="${basedir}/antlib" />
    </path>

    <!-- collect words -->
    <target name="gettext">
        <taskdef name="extract" classname="org.xnap.commons.ant.gettext.GettextExtractKeysTask">
            <classpath refid="antlib.cp" />
        </taskdef>

        <extract keysFile="messages.pot" poDirectory="i18n" keywords="-ktr">
            <fileset dir="src" includes="**/*.java" />
        </extract>
    </target>

    <!-- prepare files -->
    <target name="merge">
        <taskdef name="gettext-merge"
                 classname="org.xnap.commons.ant.gettext.GettextMergeKeysTask"
                 classpathref="antlib.cp" />
        <gettext-merge keysFile="messages.pot" poDirectory="i18n" />
    </target>

    <target name="translate" depends="gettext, merge" />
    <!-- use poedit to translate -->

    <!-- create bundle .class files and assemble jar-->
    <target name="bundle">
        <taskdef name="gettext-generate-default"
                 classname="org.xnap.commons.ant.gettext.GenerateDefaultBundleTask"
                 classpathref="antlib.cp" />
        <gettext-generate-default targetBundle="org.jbookshelf.view.i18n.Messages"
                                  outputDirectory="i18n/bin"
                                  potfile="i18n/messages.pot" />

        <taskdef name="gettext-dist" 
                 classname="org.xnap.commons.ant.gettext.GettextDistTask"
                 classpathref="antlib.cp" />
        <gettext-dist targetBundle="org.jbookshelf.view.i18n.Messages" poDirectory="i18n" outputDirectory="i18n/bin" />

        <jar destfile="${libdir}/jbs-i18n.jar">
            <fileset dir="i18n/bin" />
        </jar>

        <delete dir="i18n/bin/org" />
    </target>


</project>
